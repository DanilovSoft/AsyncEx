<?xml version="1.0"?>
<doc>
    <assembly>
        <name>DanilovSoft.AsyncEx</name>
    </assembly>
    <members>
        <member name="T:DanilovSoft.AsyncEx.ParallelTransform">
            <summary>
            Конвейер для параллельной обработки данных.
            </summary>
        </member>
        <member name="M:DanilovSoft.AsyncEx.AsyncAutoResetEvent.WaitAsync(System.Int32)">
            <exception cref="T:System.ArgumentOutOfRangeException"/>
        </member>
        <member name="M:DanilovSoft.AsyncEx.AsyncAutoResetEvent.WaitAsync(System.TimeSpan)">
            <exception cref="T:System.ArgumentOutOfRangeException"/>
        </member>
        <member name="M:DanilovSoft.AsyncEx.AsyncAutoResetEvent.WaitAsync(System.TimeSpan,System.Threading.CancellationToken)">
            <exception cref="T:System.OperationCanceledException"/>
            <exception cref="T:System.ArgumentOutOfRangeException"/>
        </member>
        <member name="M:DanilovSoft.AsyncEx.AsyncAutoResetEvent.WaitAsync(System.Threading.CancellationToken)">
            <exception cref="T:System.OperationCanceledException"/>
        </member>
        <member name="M:DanilovSoft.AsyncEx.AsyncAutoResetEvent.WaitAsync(System.Int32,System.Threading.CancellationToken)">
            <exception cref="T:System.ArgumentOutOfRangeException"/>
            <exception cref="T:System.OperationCanceledException"/>
        </member>
        <member name="T:DanilovSoft.AsyncEx.AsyncLazy`1">
            <summary>
            Provides support for asynchronous lazy initialization. This type is fully threadsafe.
            </summary>
            <typeparam name="T">The type of object that is being asynchronously initialized.</typeparam>
        </member>
        <member name="F:DanilovSoft.AsyncEx.AsyncLazy`1._lazy">
            <summary>
            The underlying lazy task.
            </summary>
        </member>
        <member name="P:DanilovSoft.AsyncEx.AsyncLazy`1.Value">
            <summary>
             Gets the lazily initialized value of the current <see cref="T:DanilovSoft.AsyncEx.AsyncLazy`1"/> instance.
            </summary>
        </member>
        <member name="P:DanilovSoft.AsyncEx.AsyncLazy`1.IsValueCreated">
            <summary>
             Gets a value that indicates whether a value has been created for this <see cref="T:DanilovSoft.AsyncEx.AsyncLazy`1"/> instance.
            </summary>
        </member>
        <member name="P:DanilovSoft.AsyncEx.AsyncLazy`1.IsStarted">
            <summary>
            Позволяет узнать была ли запущена асинхронная операция.
            </summary>
        </member>
        <member name="P:DanilovSoft.AsyncEx.AsyncLazy`1.ValueForDebugDisplay">
            <summary>
            Gets the value of the <see cref="T:DanilovSoft.AsyncEx.AsyncLazy`1"/> for debugging display purposes.
            </summary>
        </member>
        <member name="P:DanilovSoft.AsyncEx.AsyncLazy`1.IsValueFaulted">
            <summary>
            Gets whether the value creation is faulted or not.
            </summary>
        </member>
        <member name="M:DanilovSoft.AsyncEx.AsyncLazy`1.#ctor(System.Func{System.Threading.Tasks.Task{`0}})">
            <summary>
            Initializes a new instance of the <see cref="T:DanilovSoft.AsyncEx.AsyncLazy`1"/> class.
            </summary>
            <param name="valueFactory">The asynchronous delegate that is invoked on a background thread to produce the value when it is needed.</param>
        </member>
        <member name="M:DanilovSoft.AsyncEx.AsyncLazy`1.#ctor(System.Func{System.Threading.Tasks.Task{`0}},System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:DanilovSoft.AsyncEx.AsyncLazy`1"/> class.
            </summary>
            <param name="valueFactory">The asynchronous delegate that is invoked on a background thread to produce the value when it is needed.</param>
            <param name="cacheFailure">If <see langword="false"/> then if the factory method fails, then re-run the factory method the next time instead of caching the failed task.</param>
        </member>
        <member name="M:DanilovSoft.AsyncEx.AsyncLazy`1.GetValueAsync">
            <summary>
             Gets the lazily initialized value of the current <see cref="T:DanilovSoft.AsyncEx.AsyncLazy`1"/> instance.
            </summary>
        </member>
        <member name="M:DanilovSoft.AsyncEx.AsyncLazy`1.Start">
            <summary>
            Starts the asynchronous initialization, if it has not already started.
            </summary>
        </member>
        <member name="T:DanilovSoft.AsyncEx.AsyncLazy`1.System_LazyDebugView">
            <summary>A debugger view of the <see cref="T:DanilovSoft.AsyncEx.AsyncLazy`1"/> to surface additional debugging properties and 
            to ensure that the <see cref="T:DanilovSoft.AsyncEx.AsyncLazy`1"/> does not become initialized if it was not already.
            </summary>
        </member>
        <member name="F:DanilovSoft.AsyncEx.AsyncLock._queue">
            <summary>
            Очередь пользовательских тасков, которые хотят получить блокировку.
            </summary>
            <remarks>Доступ через блокировку <see cref="F:DanilovSoft.AsyncEx.AsyncLock._syncObj"/></remarks>
        </member>
        <member name="F:DanilovSoft.AsyncEx.AsyncLock._releaseTaskToken">
            <summary>
            Токен для потока у которого есть право освободить блокировку.
            Может только увеличиваться.
            </summary>
            <remarks>Превентивная защита от освобождения блокировки чужим потоком.</remarks>
        </member>
        <member name="F:DanilovSoft.AsyncEx.AsyncLock._taken">
            <summary>
            Когда блокировка захвачена таском.
            </summary>
            <remarks>Модификация через блокировку <see cref="F:DanilovSoft.AsyncEx.AsyncLock._syncObj"/> или атомарно.</remarks>
        </member>
        <member name="M:DanilovSoft.AsyncEx.AsyncLock.LockAsync(System.Func{System.Threading.Tasks.Task})">
            <summary>
            Выполняет блокировку задачи (Task), все задачи запущенные через LockAsync будут выполнятся последовательно
            </summary>
            <exception cref="T:System.ArgumentNullException"></exception>
        </member>
        <member name="M:DanilovSoft.AsyncEx.AsyncLock.LockAsync(System.Action)">
            <summary>
            Action будет разделять блоировку совместно с задачами (Task) запущеными через LockAsync и будет выполнятся последовательно 
            </summary>
            <exception cref="T:System.ArgumentNullException"></exception>
        </member>
        <member name="M:DanilovSoft.AsyncEx.AsyncLock.LockAsync">
            <summary>
            Блокирует выполнение до тех пор пока не будет захвачена блокировка
            предоставляющая эксклюзивный доступ к текущему экземпляру <see cref="T:DanilovSoft.AsyncEx.AsyncLock"/>.
            Освобождение блокировки производится вызовом <see cref="M:DanilovSoft.AsyncEx.LockReleaser.Dispose"/>.
            </summary>
            <returns>Ресурс удерживающий блокировку.</returns>
        </member>
        <member name="M:DanilovSoft.AsyncEx.AsyncLock.ReleaseLock(DanilovSoft.AsyncEx.LockReleaser)">
            <summary>
            Освобождает блокировку по запросу пользователя.
            </summary>
        </member>
        <member name="M:DanilovSoft.AsyncEx.AsyncLock.CreateNextReleaser">
            <summary>
            Увеличивает идентификатор что-бы инвалидировать все ранее созданные <see cref="T:DanilovSoft.AsyncEx.LockReleaser"/>.
            </summary>
            <remarks>Увеличивает <see cref="F:DanilovSoft.AsyncEx.AsyncLock._releaseTaskToken"/>.</remarks>
            <returns><see cref="T:DanilovSoft.AsyncEx.LockReleaser"/> у которого есть эксклюзивное право освободить текущую блокировку.</returns>
        </member>
        <member name="M:DanilovSoft.AsyncEx.AsyncLock.GetNextReleaserToken">
            <summary>
            Предотвращает освобождение блокировки чужим потоком.
            </summary>
            <remarks>Увеличивает <see cref="F:DanilovSoft.AsyncEx.AsyncLock._releaseTaskToken"/>.</remarks>
        </member>
        <member name="F:DanilovSoft.AsyncEx.AsyncLock.WaitQueue._queue">
            <summary>
            Очередь ожидающий потоков (тасков) претендующих на захват блокировки.
            </summary>
            <remarks>Доступ только через блокировку <see cref="F:DanilovSoft.AsyncEx.AsyncLock._syncObj"/>.</remarks>
        </member>
        <member name="M:DanilovSoft.AsyncEx.AsyncLock.WaitQueue.EnqueueAndWait">
            <summary>
            Добавляет поток в очередь на ожидание эксклюзивной блокировки.
            </summary>
        </member>
        <member name="P:DanilovSoft.AsyncEx.AsyncLock.DebugView.PendingTasks">
            <summary>
            Сколько потоков (тасков) ожидают блокировку.
            </summary>
        </member>
        <member name="M:DanilovSoft.AsyncEx.AsyncManualResetEventEx.WaitAsync(System.Int32)">
            <exception cref="T:System.ArgumentOutOfRangeException"/>
        </member>
        <member name="M:DanilovSoft.AsyncEx.AsyncManualResetEventEx.WaitAsync(System.TimeSpan)">
            <exception cref="T:System.ArgumentOutOfRangeException"/>
        </member>
        <member name="M:DanilovSoft.AsyncEx.AsyncManualResetEventEx.WaitAsync(System.TimeSpan,System.Threading.CancellationToken)">
            <exception cref="T:System.OperationCanceledException"/>
            <exception cref="T:System.ArgumentOutOfRangeException"/>
        </member>
        <member name="M:DanilovSoft.AsyncEx.AsyncManualResetEventEx.WaitAsync(System.Threading.CancellationToken)">
            <exception cref="T:System.OperationCanceledException"/>
        </member>
        <member name="M:DanilovSoft.AsyncEx.AsyncManualResetEventEx.WaitAsync(System.Int32,System.Threading.CancellationToken)">
            <exception cref="T:System.ArgumentOutOfRangeException"/>
            <exception cref="T:System.OperationCanceledException"/>
        </member>
        <member name="F:DanilovSoft.AsyncEx.Debounce`1._arg">
            <summary>
            Чтение и запись только в блокировке _invokeObj.
            </summary>
        </member>
        <member name="F:DanilovSoft.AsyncEx.Debounce`1._cancelState">
            <summary>
            Чтение и запись только в блокировке _invokeObj.
            </summary>
        </member>
        <member name="M:DanilovSoft.AsyncEx.Debounce`1.#ctor(System.Action{`0},System.Int32)">
            <summary>
            
            </summary>
            <param name="delay">Задержка в миллисекундах.</param>
        </member>
        <member name="M:DanilovSoft.AsyncEx.Debounce`1.Invoke(`0)">
            <exception cref="T:System.ObjectDisposedException"/>
        </member>
        <member name="M:DanilovSoft.AsyncEx.Debounce`1.Cancel(System.Boolean)">
            <summary>
            Не вызывать одновременно с Invoke.
            </summary>
            <exception cref="T:System.ObjectDisposedException"/>
        </member>
        <member name="M:DanilovSoft.AsyncEx.Debounce`1.CheckDisposed">
            <exception cref="T:System.ObjectDisposedException"/>
        </member>
        <member name="T:DanilovSoft.AsyncEx.ManualResetEventSource`1">
            <summary>
            Позволяет по запросу обмениваться объектами между потоками.
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="M:DanilovSoft.AsyncEx.ManualResetEventSource`1.TryTake(`0@)">
            <exception cref="T:System.InvalidOperationException"/>
        </member>
        <member name="M:DanilovSoft.AsyncEx.ManualResetEventSource`1.Wait(System.TimeSpan,`0@)">
            <returns>False если за отведённое время не получили объект от другого потока.</returns>
            <exception cref="T:System.InvalidOperationException"/>
        </member>
        <member name="M:DanilovSoft.AsyncEx.ManualResetEventSource`1.Wait">
            <exception cref="T:System.InvalidOperationException"/>
        </member>
        <member name="F:DanilovSoft.AsyncEx.Throttle`1._arg">
            <summary>
            Чтение и запись только в блокировке _invokeObj.
            </summary>
        </member>
        <member name="M:DanilovSoft.AsyncEx.Throttle`1.#ctor(System.Action{`0},System.Int32)">
            <summary>
            
            </summary>
            <param name="delay">Задержка в миллисекундах.</param>
        </member>
        <member name="M:DanilovSoft.AsyncEx.Throttle`1.Invoke(`0)">
            <exception cref="T:System.ObjectDisposedException"/>
        </member>
        <member name="M:DanilovSoft.AsyncEx.Throttle`1.DisposeCore">
            <returns>True если вызов колбэка гарантированно предотвращён.</returns>
        </member>
        <member name="M:DanilovSoft.AsyncEx.Throttle`1.WaitForCallbackToCompleteAsync">
            <summary>
            Асинхронно ожидает однократное завершение колбэка.
            </summary>
        </member>
        <member name="T:DanilovSoft.AsyncEx.LockReleaser">
            <summary>
            Держит блокировку <see cref="T:DanilovSoft.AsyncEx.AsyncLock"/> до вызова Dispose.
            </summary>
        </member>
        <member name="F:DanilovSoft.AsyncEx.LockReleaser.ReleaseToken">
            <summary>
            Токен который изначально имел право выполнить освобождение блокировки.
            </summary>
            <remarks>Сверяется с <see cref="F:DanilovSoft.AsyncEx.AsyncLock._releaseTaskToken"/> в момент Dispose 
            для проверки права освобождения блокировки (предотвращение повторного Dispose).</remarks>
        </member>
        <member name="M:DanilovSoft.AsyncEx.LockReleaser.Dispose">
            <summary>
            Освобождает захваченную блокировку.
            </summary>
            <remarks>Потокобезопасно.</remarks>
        </member>
        <member name="M:DanilovSoft.AsyncEx.TaskEx.WhenAllOrAnyException(System.Threading.Tasks.Task[])">
            <remarks>Проглатывает последующие исключения.</remarks>
        </member>
        <member name="M:DanilovSoft.AsyncEx.TaskEx.WhenAllOrAnyException(System.Collections.Generic.IEnumerable{System.Threading.Tasks.Task})">
            <remarks>Проглатывает последующие исключения.</remarks>
        </member>
        <member name="M:DanilovSoft.AsyncEx.TaskEx.Run``2(System.Func{``0,System.Threading.Tasks.Task{``1}},``0)">
            <summary>
            Шорткат для Task.Run(() =>
            </summary>
        </member>
        <member name="M:DanilovSoft.AsyncEx.TaskExtensions.WaitAsync(System.Threading.Tasks.Task,System.Threading.CancellationToken)">
            <summary>
            Asynchronously waits for the task to complete, or for the cancellation token to be canceled.
            </summary>
            <param name="task">The task to wait for.</param>
            <param name="cancellationToken">The cancellation token that cancels the wait.</param>
            <exception cref="T:System.OperationCanceledException"/>
        </member>
        <member name="M:DanilovSoft.AsyncEx.TaskExtensions.DoWaitAsync(System.Threading.Tasks.Task,System.Threading.CancellationToken)">
            <exception cref="T:System.OperationCanceledException"/>
        </member>
        <member name="M:DanilovSoft.AsyncEx.ThrowHelper.ArgumentNotNull``1(``0,System.String)">
            <exception cref="T:System.ArgumentNullException"/>
        </member>
        <member name="M:DanilovSoft.AsyncEx.ThrowHelper.ThrowArgumentNull(System.String)">
            <exception cref="T:System.ArgumentNullException"/>
        </member>
        <member name="M:DanilovSoft.AsyncEx.ThrowHelper.ThrowArgumentOutOfRange(System.String)">
            <exception cref="T:System.ArgumentOutOfRangeException"/>
        </member>
        <member name="M:DanilovSoft.AsyncEx.ThrowHelper.ThrowObjectDisposed``1">
            <exception cref="T:System.ObjectDisposedException"/>
        </member>
    </members>
</doc>
